<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F4xx-Nucleo-Polling\STM32F401RE_Nucleo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F4xx-Nucleo-Polling\STM32F401RE_Nucleo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Apr 12 19:21:50 2019
<BR><P>
<H3>Maximum Stack Usage =       1344 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; demoCycle &rArr; demoPollNFCF &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[119]">rfalListenSetState</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[119]">rfalListenSetState</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[30]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[34]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[35]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[36]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[37]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[38]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2d]">EXTI15_10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d]">EXTI9_5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[40]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[26]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[25]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[28]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[27]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3f]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3e]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[39]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2e]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[31]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[33]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[41]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[21]">TIM1_CC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[20]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[23]">TIM3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[24]">TIM4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[32]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3d]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[44]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[45]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[46]">iso15693PhyVCDCode1Of256</a> from rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of256) referenced from rfal_iso15693_2.o(i.iso15693VCDCode)
 <LI><a href="#[47]">iso15693PhyVCDCode1Of4</a> from rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of4) referenced from rfal_iso15693_2.o(i.iso15693VCDCode)
 <LI><a href="#[42]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[48]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[147]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[148]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[149]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14c]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepATTRIB
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcDepBlockingTxRx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[cb]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[12a]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[153]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[154]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[156]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[157]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[52]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = EXTI0_IRQHandler &rArr; st25r3911Isr &rArr; st25r3911CheckForReceivedInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Isr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[5e]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[61]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[62]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911InitInterrupts
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadTestRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckFieldSetLED
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[5d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[80]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[64]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[67]"></a>HAL_MspInit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[6a]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadTestRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
</UL>

<P><STRONG><a name="[6b]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadTestRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[69]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[65]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[6d]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[84]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[83]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[6e]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[6f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1048 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[70]"></a>HAL_SPI_Init</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[71]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[72]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
</UL>

<P><STRONG><a name="[76]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[75]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[77]"></a>HAL_UART_Init</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>HAL_UART_MspInit</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[7a]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartTx
</UL>

<P><STRONG><a name="[cd]"></a>SpiInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.SpiInit))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>SpiTxRx</STRONG> (Thumb, 60 bytes, Stack size 536 bytes, spi.o(i.SpiTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadTestRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SystemClock_Config</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[158]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[159]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[15a]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[ca]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[15b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[60]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[8f]"></a>demoCycle</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, demo.o(i.demoCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = demoCycle &rArr; demoPollNFCF &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeHasWoke
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>hex2Str</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, logger.o(i.hex2Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[12f]"></a>iso15693PhyConfigure</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rfal_iso15693_2.o(i.iso15693PhyConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[bc]"></a>iso15693VCDCode</STRONG> (Thumb, 382 bytes, Stack size 64 bytes, rfal_iso15693_2.o(i.iso15693VCDCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = iso15693VCDCode &rArr; rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[be]"></a>iso15693VICCDecode</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, rfal_iso15693_2.o(i.iso15693VICCDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iso15693VICCDecode &rArr; rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[93]"></a>logUsart</STRONG> (Thumb, 46 bytes, Stack size 280 bytes, logger.o(i.logUsart))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = logUsart &rArr; logUsartTx &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartTx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendAPDUs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>logUsartInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, logger.o(i.logUsartInit))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>logUsartTx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, logger.o(i.logUsartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = logUsartTx &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[42]"></a>main</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = main &rArr; demoCycle &rArr; demoPollNFCF &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalAnalogConfigInitialize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[cf]"></a>rfalAnalogConfigInitialize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_analogconfig.o(i.rfalAnalogConfigInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>rfalCalibrate</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rfalCalibrate &rArr; st25r3911AdjustRegulators &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[df]"></a>rfalChipChangeRegBits</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalChipChangeRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rfalChipChangeRegBits &rArr; st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[e1]"></a>rfalChipChangeTestRegBits</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalChipChangeTestRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[bd]"></a>rfalCrcCalculateCcitt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfal_crc.o(i.rfalCrcCalculateCcitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
</UL>

<P><STRONG><a name="[ef]"></a>rfalFeliCaPoll</STRONG> (Thumb, 258 bytes, Stack size 80 bytes, rfal_rfst25r3911.o(i.rfalFeliCaPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
</UL>

<P><STRONG><a name="[92]"></a>rfalFieldOff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalFieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rfalFieldOff &rArr; rfalCleanupTransceive &rArr; st25r3911SetRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOff
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[99]"></a>rfalFieldOnAndStartGT</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalFieldOnAndStartGT))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = rfalFieldOnAndStartGT &rArr; st25r3911PerformCollisionAvoidance &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOn
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[11c]"></a>rfalGetBitRate</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalGetBitRate))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[c2]"></a>rfalGetTransceiveStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalGetTransceiveStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
</UL>

<P><STRONG><a name="[f5]"></a>rfalISO14443ATransceiveAnticollisionFrame</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, rfal_rfst25r3911.o(i.rfalISO14443ATransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = rfalISO14443ATransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
</UL>

<P><STRONG><a name="[fc]"></a>rfalISO14443ATransceiveShortFrame</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, rfal_rfst25r3911.o(i.rfalISO14443ATransceiveShortFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = rfalISO14443ATransceiveShortFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>

<P><STRONG><a name="[104]"></a>rfalISO15693TransceiveAnticollisionEOF</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalISO15693TransceiveAnticollisionEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = rfalISO15693TransceiveAnticollisionEOF &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[105]"></a>rfalISO15693TransceiveAnticollisionFrame</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, rfal_rfst25r3911.o(i.rfalISO15693TransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionEOF
</UL>

<P><STRONG><a name="[d0]"></a>rfalInitialize</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = rfalInitialize &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911InitInterrupts
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckChipID
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>rfalIsExtFieldOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalIsExtFieldOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rfalIsExtFieldOn &rArr; st25r3911CheckReg &rArr; st25r3911ReadRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[fd]"></a>rfalIsGTExpired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalIsGTExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rfalIsGTExpired &rArr; timerIsExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>

<P><STRONG><a name="[10b]"></a>rfalIsoDepATTRIB</STRONG> (Thumb, 182 bytes, Stack size 96 bytes, rfal_isodep.o(i.rfalIsoDepATTRIB))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = rfalIsoDepATTRIB &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
</UL>

<P><STRONG><a name="[10f]"></a>rfalIsoDepDeselect</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rfal_isodep.o(i.rfalIsoDepDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[115]"></a>rfalIsoDepFSxI2FSx</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepFSxI2FSx))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepRATS
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[c6]"></a>rfalIsoDepFWI2FWT</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepFWI2FWT))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[a4]"></a>rfalIsoDepGetApduTransceiveStatus</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, rfal_isodep.o(i.rfalIsoDepGetApduTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
</UL>

<P><STRONG><a name="[10e]"></a>rfalIsoDepGetMaxInfLen</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetMaxInfLen))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
</UL>

<P><STRONG><a name="[110]"></a>rfalIsoDepGetTransceiveStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[b1]"></a>rfalIsoDepInitialize</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
</UL>

<P><STRONG><a name="[112]"></a>rfalIsoDepPPS</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, rfal_isodep.o(i.rfalIsoDepPPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalIsoDepPPS &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[b2]"></a>rfalIsoDepPollAHandleActivation</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, rfal_isodep.o(i.rfalIsoDepPollAHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rfalIsoDepPollAHandleActivation &rArr; rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepSFGI2SFGT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepRATS
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPPS
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
</UL>

<P><STRONG><a name="[b6]"></a>rfalIsoDepPollBHandleActivation</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, rfal_isodep.o(i.rfalIsoDepPollBHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rfalIsoDepPollBHandleActivation &rArr; rfalIsoDepATTRIB &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepSFGI2SFGT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbTR2ToFDT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepATTRIB
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
</UL>

<P><STRONG><a name="[113]"></a>rfalIsoDepRATS</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, rfal_isodep.o(i.rfalIsoDepRATS))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = rfalIsoDepRATS &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[a2]"></a>rfalIsoDepStartApduTransceive</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, rfal_isodep.o(i.rfalIsoDepStartApduTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rfalIsoDepStartApduTransceive &rArr; rfalIsoDepApdu2IBLockParam
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
</UL>

<P><STRONG><a name="[111]"></a>rfalIsoDepStartTransceive</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rfal_isodep.o(i.rfalIsoDepStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsoDepStartTransceive
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[119]"></a>rfalListenSetState</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, rfal_rfst25r3911.o(i.rfalListenSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + In Cycle
<LI>Call Chain = rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[11a]"></a>rfalNfcDepATR</STRONG> (Thumb, 240 bytes, Stack size 304 bytes, rfal_nfcdep.o(i.rfalNfcDepATR))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[11b]"></a>rfalNfcDepCalculateRWT</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepCalculateRWT))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[a7]"></a>rfalNfcDepGetTransceiveStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcDepBlockingTxRx
</UL>

<P><STRONG><a name="[8d]"></a>rfalNfcDepInitialize</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoActivateP2P
</UL>

<P><STRONG><a name="[8e]"></a>rfalNfcDepInitiatorHandleActivation</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, rfal_nfcdep.o(i.rfalNfcDepInitiatorHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepCalculateRWT
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoActivateP2P
</UL>

<P><STRONG><a name="[11d]"></a>rfalNfcDepPSL</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepPSL))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = rfalNfcDepPSL &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[a6]"></a>rfalNfcDepStartTransceive</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rfalNfcDepStartTransceive &rArr; nfcipSetDEPParams
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipSetDEPParams
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcDepBlockingTxRx
</UL>

<P><STRONG><a name="[11e]"></a>rfalNfcaPollerCheckPresence</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rfal_nfca.o(i.rfalNfcaPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rfalNfcaPollerCheckPresence &rArr; rfalISO14443ATransceiveShortFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[b0]"></a>rfalNfcaPollerFullCollisionResolution</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, rfal_nfca.o(i.rfalNfcaPollerFullCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rfalNfcaPollerFullCollisionResolution &rArr; rfalNfcaPollerSingleCollisionResolution &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
</UL>

<P><STRONG><a name="[ae]"></a>rfalNfcaPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalNfcaPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
</UL>

<P><STRONG><a name="[121]"></a>rfalNfcaPollerSingleCollisionResolution</STRONG> (Thumb, 450 bytes, Stack size 96 bytes, rfal_nfca.o(i.rfalNfcaPollerSingleCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = rfalNfcaPollerSingleCollisionResolution &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaCalculateBcc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[122]"></a>rfalNfcaPollerSleep</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rfal_nfca.o(i.rfalNfcaPollerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rfalNfcaPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[af]"></a>rfalNfcaPollerTechnologyDetection</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaPollerTechnologyDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalNfcaPollerTechnologyDetection &rArr; rfalNfcaPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
</UL>

<P><STRONG><a name="[124]"></a>rfalNfcbPollerCheckPresence</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, rfal_nfcb.o(i.rfalNfcbPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
</UL>

<P><STRONG><a name="[b5]"></a>rfalNfcbPollerCollisionResolution</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, rfal_nfcb.o(i.rfalNfcbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = rfalNfcbPollerCollisionResolution &rArr; rfalNfcbPollerCollisionResolutionSlotted &rArr; rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
</UL>

<P><STRONG><a name="[126]"></a>rfalNfcbPollerCollisionResolutionSlotted</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, rfal_nfcb.o(i.rfalNfcbPollerCollisionResolutionSlotted))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = rfalNfcbPollerCollisionResolutionSlotted &rArr; rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
</UL>

<P><STRONG><a name="[b4]"></a>rfalNfcbPollerInitialize</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rfal_nfcb.o(i.rfalNfcbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
</UL>

<P><STRONG><a name="[127]"></a>rfalNfcbPollerSleep</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, rfal_nfcb.o(i.rfalNfcbPollerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalNfcbPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
</UL>

<P><STRONG><a name="[128]"></a>rfalNfcbPollerSlotMarker</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rfal_nfcb.o(i.rfalNfcbPollerSlotMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalNfcbPollerSlotMarker &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
</UL>

<P><STRONG><a name="[118]"></a>rfalNfcbTR2ToFDT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbTR2ToFDT))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
</UL>

<P><STRONG><a name="[b8]"></a>rfalNfcfPollerCheckPresence</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rfal_nfcf.o(i.rfalNfcfPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = rfalNfcfPollerCheckPresence &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
</UL>

<P><STRONG><a name="[b9]"></a>rfalNfcfPollerCollisionResolution</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, rfal_nfcf.o(i.rfalNfcfPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = rfalNfcfPollerCollisionResolution &rArr; rfalNfcfPollerPoll &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
</UL>

<P><STRONG><a name="[b7]"></a>rfalNfcfPollerInitialize</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rfal_nfcf.o(i.rfalNfcfPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalNfcfPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
</UL>

<P><STRONG><a name="[12b]"></a>rfalNfcfPollerPoll</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, rfal_nfcf.o(i.rfalNfcfPollerPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = rfalNfcfPollerPoll &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
</UL>

<P><STRONG><a name="[bb]"></a>rfalNfcvPollerCollisionResolution</STRONG> (Thumb, 292 bytes, Stack size 192 bytes, rfal_nfcv.o(i.rfalNfcvPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = rfalNfcvPollerCollisionResolution &rArr; rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionEOF
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
</UL>

<P><STRONG><a name="[ba]"></a>rfalNfcvPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfal_nfcv.o(i.rfalNfcvPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalNfcvPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
</UL>

<P><STRONG><a name="[12c]"></a>rfalNfcvPollerInventory</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, rfal_nfcv.o(i.rfalNfcvPollerInventory))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[109]"></a>rfalSetAnalogConfig</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, rfal_analogconfig.o(i.rfalSetAnalogConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[117]"></a>rfalSetBitRate</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalSetBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693PhyConfigure
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[a9]"></a>rfalSetErrorHandling</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalSetErrorHandling))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
</UL>

<P><STRONG><a name="[aa]"></a>rfalSetFDTListen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalSetFDTListen))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
</UL>

<P><STRONG><a name="[ab]"></a>rfalSetFDTPoll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalSetFDTPoll))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
</UL>

<P><STRONG><a name="[ac]"></a>rfalSetGT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalSetGT))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
</UL>

<P><STRONG><a name="[a8]"></a>rfalSetMode</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, rfal_rfst25r3911.o(i.rfalSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
</UL>

<P><STRONG><a name="[9a]"></a>rfalSt25tbPollerCheckPresence</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rfal_st25tb.o(i.rfalSt25tbPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = rfalSt25tbPollerCheckPresence &rArr; rfalSt25tbPollerInitiate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[9b]"></a>rfalSt25tbPollerCollisionResolution</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = rfalSt25tbPollerCollisionResolution &rArr; rfalSt25tbPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSlotMarker
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerPcall
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[133]"></a>rfalSt25tbPollerGetUID</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerGetUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rfalSt25tbPollerGetUID &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[98]"></a>rfalSt25tbPollerInitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalSt25tbPollerInitialize &rArr; rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[131]"></a>rfalSt25tbPollerInitiate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalSt25tbPollerInitiate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
</UL>

<P><STRONG><a name="[135]"></a>rfalSt25tbPollerPcall</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerPcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rfalSt25tbPollerPcall &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[132]"></a>rfalSt25tbPollerSelect</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalSt25tbPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[134]"></a>rfalSt25tbPollerSlotMarker</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerSlotMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rfalSt25tbPollerSlotMarker &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[f6]"></a>rfalStartTransceive</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>

<P><STRONG><a name="[11f]"></a>rfalT1TPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfal_t1t.o(i.rfalT1TPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalT1TPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[120]"></a>rfalT1TPollerRid</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, rfal_t1t.o(i.rfalT1TPollerRid))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalT1TPollerRid &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[f0]"></a>rfalTransceiveBlockingRx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalTransceiveBlockingRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[c7]"></a>rfalTransceiveBlockingTx</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, rfal_rfst25r3911.o(i.rfalTransceiveBlockingTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[10c]"></a>rfalTransceiveBlockingTxRx</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, rfal_rfst25r3911.o(i.rfalTransceiveBlockingTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSlotMarker
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerPcall
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepRATS
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPPS
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepATTRIB
</UL>

<P><STRONG><a name="[90]"></a>rfalWakeUpModeHasWoke</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalWakeUpModeHasWoke))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[94]"></a>rfalWakeUpModeStart</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, rfal_rfst25r3911.o(i.rfalWakeUpModeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rfalWakeUpModeStart &rArr; st25r3911MeasureRF &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureRF
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAntennaResonance
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[91]"></a>rfalWakeUpModeStop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalWakeUpModeStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rfalWakeUpModeStop &rArr; st25r3911OscOn &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[a3]"></a>rfalWorker</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcDepBlockingTxRx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
</UL>

<P><STRONG><a name="[dd]"></a>st25r3911AdjustRegulators</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, st25r3911.o(i.st25r3911AdjustRegulators))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = st25r3911AdjustRegulators &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[de]"></a>st25r3911CalibrateAntenna</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st25r3911.o(i.st25r3911CalibrateAntenna))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911CalibrateAntenna &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[e0]"></a>st25r3911ChangeRegisterBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st25r3911_com.o(i.st25r3911ChangeRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
</UL>

<P><STRONG><a name="[e2]"></a>st25r3911ChangeTestRegisterBits</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ChangeTestRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadTestRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
</UL>

<P><STRONG><a name="[108]"></a>st25r3911CheckChipID</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25r3911.o(i.st25r3911CheckChipID))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911CheckChipID &rArr; st25r3911ReadRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[141]"></a>st25r3911CheckForReceivedInterrupts</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, st25r3911_interrupt.o(i.st25r3911CheckForReceivedInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = st25r3911CheckForReceivedInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Isr
</UL>

<P><STRONG><a name="[dc]"></a>st25r3911CheckReg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, st25r3911.o(i.st25r3911CheckReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911CheckReg &rArr; st25r3911ReadRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[142]"></a>st25r3911ClearInterrupts</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, st25r3911_interrupt.o(i.st25r3911ClearInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = st25r3911ClearInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
</UL>

<P><STRONG><a name="[e4]"></a>st25r3911ClrRegisterBits</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, st25r3911_com.o(i.st25r3911ClrRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911ClrRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOff
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[fb]"></a>st25r3911DisableInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st25r3911_interrupt.o(i.st25r3911DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911DisableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[f8]"></a>st25r3911EnableInterrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st25r3911_interrupt.o(i.st25r3911EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[f1]"></a>st25r3911ExecuteCommand</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, st25r3911_com.o(i.st25r3911ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = st25r3911ExecuteCommand &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[ec]"></a>st25r3911ExecuteCommands</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, st25r3911_com.o(i.st25r3911ExecuteCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = st25r3911ExecuteCommands &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[f7]"></a>st25r3911GetInterrupt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, st25r3911_interrupt.o(i.st25r3911GetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st25r3911GetInterrupt &rArr; HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[106]"></a>st25r3911InitInterrupts</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, st25r3911_interrupt.o(i.st25r3911InitInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st25r3911InitInterrupts &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[107]"></a>st25r3911Initialize</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = st25r3911Initialize &rArr; st25r3911MeasureVoltage &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOff
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[5b]"></a>st25r3911Isr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st25r3911_interrupt.o(i.st25r3911Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = st25r3911Isr &rArr; st25r3911CheckForReceivedInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>st25r3911MeasureAntennaResonance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st25r3911.o(i.st25r3911MeasureAntennaResonance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911MeasureAntennaResonance &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[13a]"></a>st25r3911MeasureRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st25r3911.o(i.st25r3911MeasureRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911MeasureRF &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[144]"></a>st25r3911MeasureVoltage</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911MeasureVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = st25r3911MeasureVoltage &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
</UL>

<P><STRONG><a name="[143]"></a>st25r3911ModifyInterrupts</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, st25r3911_interrupt.o(i.st25r3911ModifyInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
</UL>

<P><STRONG><a name="[13e]"></a>st25r3911ModifyRegister</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ModifyRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureVoltage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
</UL>

<P><STRONG><a name="[13c]"></a>st25r3911OscOn</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911OscOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = st25r3911OscOn &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
</UL>

<P><STRONG><a name="[f3]"></a>st25r3911PerformCollisionAvoidance</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, st25r3911.o(i.st25r3911PerformCollisionAvoidance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911PerformCollisionAvoidance &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[e9]"></a>st25r3911ReadFifo</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911ReadFifo &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[ee]"></a>st25r3911ReadMultipleRegisters</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ReadMultipleRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>

<P><STRONG><a name="[fa]"></a>st25r3911ReadRegister</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911ReadRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckChipID
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[13f]"></a>st25r3911ReadTestRegister</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ReadTestRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911ReadTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
</UL>

<P><STRONG><a name="[12e]"></a>st25r3911SetBitrate</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, st25r3911.o(i.st25r3911SetBitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911SetBitrate &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[145]"></a>st25r3911SetGPTime_8fcs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911SetGPTime_8fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = st25r3911SetGPTime_8fcs &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
</UL>

<P><STRONG><a name="[fe]"></a>st25r3911SetNoResponseTime_64fcs</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, st25r3911.o(i.st25r3911SetNoResponseTime_64fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911SetNoResponseTime_64fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[138]"></a>st25r3911SetNumTxBits</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911SetNumTxBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = st25r3911SetNumTxBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[e5]"></a>st25r3911SetRegisterBits</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, st25r3911_com.o(i.st25r3911SetRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911SetRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOn
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[100]"></a>st25r3911StartGPTimer_8fcs</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911StartGPTimer_8fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetGPTime_8fcs
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>

<P><STRONG><a name="[130]"></a>st25r3911StreamConfigure</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911StreamConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = st25r3911StreamConfigure &rArr; st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[f2]"></a>st25r3911TxRxOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st25r3911.o(i.st25r3911TxRxOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911TxRxOff &rArr; st25r3911ClrRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
</UL>

<P><STRONG><a name="[f4]"></a>st25r3911TxRxOn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st25r3911.o(i.st25r3911TxRxOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911TxRxOn &rArr; st25r3911SetRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[103]"></a>st25r3911WaitForInterruptsTimed</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, st25r3911_interrupt.o(i.st25r3911WaitForInterruptsTimed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st25r3911WaitForInterruptsTimed &rArr; timerIsExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>

<P><STRONG><a name="[139]"></a>st25r3911WriteFifo</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911WriteFifo &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[ff]"></a>st25r3911WriteRegister</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckFieldSetLED
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyInterrupts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNumTxBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetGPTime_8fcs
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[102]"></a>st25r3911WriteTestRegister</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911WriteTestRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[c8]"></a>timerCalculateTimer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.timerCalculateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerCalculateTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[c0]"></a>timerIsExpired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(i.timerIsExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerIsExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[13d]"></a>st25r3911ExecuteCommandAndGetResult</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, st25r3911.o(i.st25r3911ExecuteCommandAndGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureVoltage
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureRF
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAntennaResonance
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
</UL>

<P><STRONG><a name="[140]"></a>st25r3911CheckFieldSetLED</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, st25r3911_com.o(i.st25r3911CheckFieldSetLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st25r3911CheckFieldSetLED &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>

<P><STRONG><a name="[c4]"></a>isoDepClearCounters</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepClearCounters))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
</UL>

<P><STRONG><a name="[bf]"></a>isoDepDataExchangePCD</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, rfal_isodep.o(i.isoDepDataExchangePCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[c5]"></a>isoDepDataExchangePICC</STRONG> (Thumb, 792 bytes, Stack size 48 bytes, rfal_isodep.o(i.isoDepDataExchangePICC))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepReSendControlMsg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[c3]"></a>isoDepHandleControlMsg</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, rfal_isodep.o(i.isoDepHandleControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepReSendControlMsg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[c9]"></a>isoDepReSendControlMsg</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepReSendControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[c1]"></a>isoDepTx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, rfal_isodep.o(i.isoDepTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>

<P><STRONG><a name="[10d]"></a>rfalIsoDepApdu2IBLockParam</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rfal_isodep.o(i.rfalIsoDepApdu2IBLockParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsoDepApdu2IBLockParam
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetMaxInfLen
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[114]"></a>rfalIsoDepCalcBitRate</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, rfal_isodep.o(i.rfalIsoDepCalcBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rfalIsoDepCalcBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[116]"></a>rfalIsoDepSFGI2SFGT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepSFGI2SFGT))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[123]"></a>rfalNfcaCalculateBcc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaCalculateBcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfalNfcaCalculateBcc
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
</UL>

<P><STRONG><a name="[125]"></a>rfalNfcbCheckSensbRes</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbCheckSensbRes))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>

<P><STRONG><a name="[46]"></a>iso15693PhyVCDCode1Of256</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of256))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iso15693PhyVCDCode1Of256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(i.iso15693VCDCode)
</UL>
<P><STRONG><a name="[47]"></a>iso15693PhyVCDCode1Of4</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iso15693PhyVCDCode1Of4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(i.iso15693VCDCode)
</UL>
<P><STRONG><a name="[d6]"></a>nfcipClearCounters</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipClearCounters))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipSetDEPParams
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
</UL>

<P><STRONG><a name="[d1]"></a>nfcipConfig</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rfal_nfcdep.o(i.nfcipConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nfcipConfig &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
</UL>

<P><STRONG><a name="[d2]"></a>nfcipDEPControlMsg</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, rfal_nfcdep.o(i.nfcipDEPControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
</UL>

<P><STRONG><a name="[d4]"></a>nfcipDataRx</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.nfcipDataRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nfcipDataRx
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[d5]"></a>nfcipInitiatorHandleDEP</STRONG> (Thumb, 616 bytes, Stack size 56 bytes, rfal_nfcdep.o(i.nfcipInitiatorHandleDEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = nfcipInitiatorHandleDEP &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[d7]"></a>nfcipRun</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.nfcipRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[d9]"></a>nfcipSetDEPParams</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.nfcipSetDEPParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nfcipSetDEPParams
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
</UL>

<P><STRONG><a name="[d8]"></a>nfcipTargetHandleRX</STRONG> (Thumb, 820 bytes, Stack size 64 bytes, rfal_nfcdep.o(i.nfcipTargetHandleRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[d3]"></a>nfcipTx</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, rfal_nfcdep.o(i.nfcipTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
</UL>

<P><STRONG><a name="[da]"></a>nfcipTxRx</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, rfal_nfcdep.o(i.nfcipTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
</UL>

<P><STRONG><a name="[e3]"></a>rfalCleanupTransceive</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalCleanupTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = rfalCleanupTransceive &rArr; st25r3911SetRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
</UL>

<P><STRONG><a name="[e6]"></a>rfalErrorHandling</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalErrorHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = rfalErrorHandling &rArr; rfalFIFOStatusIsMissingPar &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsMissingPar
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[ea]"></a>rfalFIFOGetNumIncompleteBits</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalFIFOGetNumIncompleteBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = rfalFIFOGetNumIncompleteBits &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[e7]"></a>rfalFIFOStatusGetNumBytes</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalFIFOStatusGetNumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = rfalFIFOStatusGetNumBytes &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[e8]"></a>rfalFIFOStatusIsIncompleteByte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalFIFOStatusIsIncompleteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = rfalFIFOStatusIsIncompleteByte &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[eb]"></a>rfalFIFOStatusIsMissingPar</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalFIFOStatusIsMissingPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = rfalFIFOStatusIsMissingPar &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[ed]"></a>rfalFIFOStatusUpdate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalFIFOStatusUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsMissingPar
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
</UL>

<P><STRONG><a name="[101]"></a>rfalPrepareTransceive</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalPrepareTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[12d]"></a>rfalRunListenModeWorker</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalRunListenModeWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = rfalRunListenModeWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[f9]"></a>rfalTransceiveRunBlockingTx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalTransceiveRunBlockingTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>

<P><STRONG><a name="[136]"></a>rfalTransceiveRx</STRONG> (Thumb, 936 bytes, Stack size 56 bytes, rfal_rfst25r3911.o(i.rfalTransceiveRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = rfalTransceiveRx &rArr; rfalErrorHandling &rArr; rfalFIFOStatusIsMissingPar &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsMissingPar
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[137]"></a>rfalTransceiveTx</STRONG> (Thumb, 678 bytes, Stack size 64 bytes, rfal_rfst25r3911.o(i.rfalTransceiveTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNumTxBits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[129]"></a>rfalNfcfComputeValidSENF</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, rfal_nfcf.o(i.rfalNfcfComputeValidSENF))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rfalNfcfComputeValidSENF &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
</UL>

<P><STRONG><a name="[7c]"></a>MX_GPIO_Init</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>MX_SPI1_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>demoActivateP2P</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, demo.o(i.demoActivateP2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
</UL>

<P><STRONG><a name="[9f]"></a>demoIsoDepBlockingTxRx</STRONG> (Thumb, 198 bytes, Stack size 88 bytes, demo.o(i.demoIsoDepBlockingTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = demoIsoDepBlockingTxRx &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendAPDUs
</UL>

<P><STRONG><a name="[a5]"></a>demoNfcDepBlockingTxRx</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, demo.o(i.demoNfcDepBlockingTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = demoNfcDepBlockingTxRx &rArr; rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
</UL>

<P><STRONG><a name="[95]"></a>demoPollAP2P</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, demo.o(i.demoPollAP2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = demoPollAP2P &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoActivateP2P
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[96]"></a>demoPollNFCA</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, demo.o(i.demoPollNFCA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = demoPollNFCA &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendAPDUs
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoActivateP2P
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[97]"></a>demoPollNFCB</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, demo.o(i.demoPollNFCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = demoPollNFCB &rArr; demoSendAPDUs &rArr; demoIsoDepBlockingTxRx &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendAPDUs
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[9d]"></a>demoPollNFCF</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, demo.o(i.demoPollNFCF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = demoPollNFCF &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoActivateP2P
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[9e]"></a>demoPollNFCV</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, demo.o(i.demoPollNFCV))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = demoPollNFCV &rArr; rfalNfcvPollerCollisionResolution &rArr; rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[b3]"></a>demoSendAPDUs</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, demo.o(i.demoSendAPDUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = demoSendAPDUs &rArr; demoIsoDepBlockingTxRx &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
</UL>

<P><STRONG><a name="[ad]"></a>demoSendNdefUri</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, demo.o(i.demoSendNdefUri))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = demoSendNdefUri &rArr; demoNfcDepBlockingTxRx &rArr; rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcDepBlockingTxRx
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
</UL>

<P><STRONG><a name="[6c]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[74]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[73]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[79]"></a>UART_SetConfig</STRONG> (Thumb, 762 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[7b]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[87]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[86]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[8a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[89]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[45]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
