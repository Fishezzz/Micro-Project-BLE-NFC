<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32F4xx-Nucleo-3_4_NFC\Labopdracht_3_4_BLE.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32F4xx-Nucleo-3_4_NFC\Labopdracht_3_4_BLE.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon May 06 12:10:41 2019
<BR><P>
<H3>Maximum Stack Usage =       1344 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; demoCycle &rArr; demoPollNFCF &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ae]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
 <LI><a href="#[16c]">rfalListenSetState</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16c]">rfalListenSetState</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[34]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[38]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[39]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[40]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[31]">EXTI15_10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[44]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[43]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[42]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3d]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[33]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[32]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[35]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[37]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[45]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[10]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[36]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[41]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[4a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[49]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[48]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[4b]">iso15693PhyVCDCode1Of256</a> from rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of256) referenced from rfal_iso15693_2.o(i.iso15693VCDCode)
 <LI><a href="#[4c]">iso15693PhyVCDCode1Of4</a> from rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of4) referenced from rfal_iso15693_2.o(i.iso15693VCDCode)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[50]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[19a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[51]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[19c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[52]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[9f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[54]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[56]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[58]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[59]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5a]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[19d]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[5c]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5f]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[60]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[62]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[64]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[66]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[67]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[68]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[6a]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[19e]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[6c]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[6e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[70]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[72]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[19f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[74]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[76]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[78]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[79]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1b4]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1b5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1b6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1b7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1b8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1b9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1ba]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; demoCycle &rArr; demoPollNFCF &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1bd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[af]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[82]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1be]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[84]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1bf]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[17d]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
</UL>

<P><STRONG><a name="[11e]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepATTRIB
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[89]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1c0]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcDepBlockingTxRx
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
</UL>

<P><STRONG><a name="[8b]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1c1]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>

<P><STRONG><a name="[90]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[8f]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1c7]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[94]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[95]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[92]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5d]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[53]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[87]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[88]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[48]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[65]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[9c]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[61]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[69]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[9d]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[63]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[6b]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[55]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[98]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[8d]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[1cc]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[97]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1cd]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a9]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[aa]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[6d]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[6f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[ab]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[71]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[73]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[9a]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[7c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[ac]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[77]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[a8]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a2]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ce]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1cf]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[85]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1d0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b1]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[b0]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[b2]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[b3]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[a4]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a5]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b4]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = EXTI0_IRQHandler &rArr; st25r3911Isr &rArr; st25r3911CheckForReceivedInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Isr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
</UL>

<P><STRONG><a name="[b9]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>HAL_GPIO_Init</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
</UL>

<P><STRONG><a name="[bd]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911InitInterrupts
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadTestRegister
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckFieldSetLED
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
</UL>

<P><STRONG><a name="[b8]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[db]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[bf]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_MspInit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadTestRegister
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
</UL>

<P><STRONG><a name="[c6]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadTestRegister
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
</UL>

<P><STRONG><a name="[c4]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c0]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[df]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[de]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c9]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1098 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cc]"></a>HAL_SPI_Init</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
</UL>

<P><STRONG><a name="[d2]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d1]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_UART_Init</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>HAL_UART_MspInit</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartTx
</UL>

<P><STRONG><a name="[120]"></a>SpiInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.SpiInit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>SpiTxRx</STRONG> (Thumb, 60 bytes, Stack size 536 bytes, spi.o(i.SpiTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadTestRegister
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>SystemClock_Config</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[9e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[bb]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e3]"></a>demoCycle</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, demo.o(i.demoCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = demoCycle &rArr; demoPollNFCF &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeHasWoke
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>hex2Str</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, logger.o(i.hex2Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[182]"></a>iso15693PhyConfigure</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rfal_iso15693_2.o(i.iso15693PhyConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[10f]"></a>iso15693VCDCode</STRONG> (Thumb, 382 bytes, Stack size 64 bytes, rfal_iso15693_2.o(i.iso15693VCDCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = iso15693VCDCode &rArr; rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[111]"></a>iso15693VICCDecode</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, rfal_iso15693_2.o(i.iso15693VICCDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iso15693VICCDecode &rArr; rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[e7]"></a>logUsart</STRONG> (Thumb, 46 bytes, Stack size 280 bytes, logger.o(i.logUsart))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = logUsart &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartTx
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendAPDUs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>logUsartInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, logger.o(i.logUsartInit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>logUsartTx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, logger.o(i.logUsartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = logUsartTx &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[80]"></a>main</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = main &rArr; demoCycle &rArr; demoPollNFCF &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalAnalogConfigInitialize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[122]"></a>rfalAnalogConfigInitialize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_analogconfig.o(i.rfalAnalogConfigInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>rfalCalibrate</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rfalCalibrate &rArr; st25r3911AdjustRegulators &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[132]"></a>rfalChipChangeRegBits</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalChipChangeRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rfalChipChangeRegBits &rArr; st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[134]"></a>rfalChipChangeTestRegBits</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalChipChangeTestRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[110]"></a>rfalCrcCalculateCcitt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfal_crc.o(i.rfalCrcCalculateCcitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
</UL>

<P><STRONG><a name="[142]"></a>rfalFeliCaPoll</STRONG> (Thumb, 258 bytes, Stack size 80 bytes, rfal_rfst25r3911.o(i.rfalFeliCaPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
</UL>

<P><STRONG><a name="[e6]"></a>rfalFieldOff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalFieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rfalFieldOff &rArr; rfalCleanupTransceive &rArr; st25r3911SetRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOff
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[ed]"></a>rfalFieldOnAndStartGT</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalFieldOnAndStartGT))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = rfalFieldOnAndStartGT &rArr; st25r3911PerformCollisionAvoidance &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOn
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[16f]"></a>rfalGetBitRate</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalGetBitRate))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[116]"></a>rfalGetTransceiveStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalGetTransceiveStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
</UL>

<P><STRONG><a name="[148]"></a>rfalISO14443ATransceiveAnticollisionFrame</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, rfal_rfst25r3911.o(i.rfalISO14443ATransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = rfalISO14443ATransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
</UL>

<P><STRONG><a name="[14f]"></a>rfalISO14443ATransceiveShortFrame</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, rfal_rfst25r3911.o(i.rfalISO14443ATransceiveShortFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = rfalISO14443ATransceiveShortFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>

<P><STRONG><a name="[157]"></a>rfalISO15693TransceiveAnticollisionEOF</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalISO15693TransceiveAnticollisionEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = rfalISO15693TransceiveAnticollisionEOF &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[158]"></a>rfalISO15693TransceiveAnticollisionFrame</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, rfal_rfst25r3911.o(i.rfalISO15693TransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionEOF
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
</UL>

<P><STRONG><a name="[123]"></a>rfalInitialize</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = rfalInitialize &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911InitInterrupts
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckChipID
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>rfalIsExtFieldOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalIsExtFieldOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rfalIsExtFieldOn &rArr; st25r3911CheckReg &rArr; st25r3911ReadRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[150]"></a>rfalIsGTExpired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalIsGTExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rfalIsGTExpired &rArr; timerIsExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>

<P><STRONG><a name="[15e]"></a>rfalIsoDepATTRIB</STRONG> (Thumb, 182 bytes, Stack size 96 bytes, rfal_isodep.o(i.rfalIsoDepATTRIB))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = rfalIsoDepATTRIB &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
</UL>

<P><STRONG><a name="[162]"></a>rfalIsoDepDeselect</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rfal_isodep.o(i.rfalIsoDepDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[168]"></a>rfalIsoDepFSxI2FSx</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepFSxI2FSx))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepRATS
</UL>

<P><STRONG><a name="[11a]"></a>rfalIsoDepFWI2FWT</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepFWI2FWT))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[f7]"></a>rfalIsoDepGetApduTransceiveStatus</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, rfal_isodep.o(i.rfalIsoDepGetApduTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
</UL>

<P><STRONG><a name="[161]"></a>rfalIsoDepGetMaxInfLen</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetMaxInfLen))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
</UL>

<P><STRONG><a name="[163]"></a>rfalIsoDepGetTransceiveStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[104]"></a>rfalIsoDepInitialize</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[165]"></a>rfalIsoDepPPS</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, rfal_isodep.o(i.rfalIsoDepPPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalIsoDepPPS &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[105]"></a>rfalIsoDepPollAHandleActivation</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, rfal_isodep.o(i.rfalIsoDepPollAHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rfalIsoDepPollAHandleActivation &rArr; rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepRATS
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPPS
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepSFGI2SFGT
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
</UL>

<P><STRONG><a name="[109]"></a>rfalIsoDepPollBHandleActivation</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, rfal_isodep.o(i.rfalIsoDepPollBHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rfalIsoDepPollBHandleActivation &rArr; rfalIsoDepATTRIB &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbTR2ToFDT
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepATTRIB
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepSFGI2SFGT
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
</UL>

<P><STRONG><a name="[166]"></a>rfalIsoDepRATS</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, rfal_isodep.o(i.rfalIsoDepRATS))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = rfalIsoDepRATS &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[f5]"></a>rfalIsoDepStartApduTransceive</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, rfal_isodep.o(i.rfalIsoDepStartApduTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rfalIsoDepStartApduTransceive &rArr; rfalIsoDepApdu2IBLockParam
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
</UL>

<P><STRONG><a name="[164]"></a>rfalIsoDepStartTransceive</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rfal_isodep.o(i.rfalIsoDepStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsoDepStartTransceive
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[16c]"></a>rfalListenSetState</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, rfal_rfst25r3911.o(i.rfalListenSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + In Cycle
<LI>Call Chain = rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[16d]"></a>rfalNfcDepATR</STRONG> (Thumb, 240 bytes, Stack size 304 bytes, rfal_nfcdep.o(i.rfalNfcDepATR))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[16e]"></a>rfalNfcDepCalculateRWT</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepCalculateRWT))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[fa]"></a>rfalNfcDepGetTransceiveStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcDepBlockingTxRx
</UL>

<P><STRONG><a name="[e1]"></a>rfalNfcDepInitialize</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoActivateP2P
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
</UL>

<P><STRONG><a name="[e2]"></a>rfalNfcDepInitiatorHandleActivation</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, rfal_nfcdep.o(i.rfalNfcDepInitiatorHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepCalculateRWT
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoActivateP2P
</UL>

<P><STRONG><a name="[170]"></a>rfalNfcDepPSL</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepPSL))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = rfalNfcDepPSL &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[f9]"></a>rfalNfcDepStartTransceive</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rfalNfcDepStartTransceive &rArr; nfcipSetDEPParams
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipSetDEPParams
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcDepBlockingTxRx
</UL>

<P><STRONG><a name="[171]"></a>rfalNfcaPollerCheckPresence</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rfal_nfca.o(i.rfalNfcaPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rfalNfcaPollerCheckPresence &rArr; rfalISO14443ATransceiveShortFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[103]"></a>rfalNfcaPollerFullCollisionResolution</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, rfal_nfca.o(i.rfalNfcaPollerFullCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rfalNfcaPollerFullCollisionResolution &rArr; rfalNfcaPollerSingleCollisionResolution &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
</UL>

<P><STRONG><a name="[101]"></a>rfalNfcaPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalNfcaPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
</UL>

<P><STRONG><a name="[174]"></a>rfalNfcaPollerSingleCollisionResolution</STRONG> (Thumb, 450 bytes, Stack size 96 bytes, rfal_nfca.o(i.rfalNfcaPollerSingleCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = rfalNfcaPollerSingleCollisionResolution &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaCalculateBcc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[175]"></a>rfalNfcaPollerSleep</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rfal_nfca.o(i.rfalNfcaPollerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rfalNfcaPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[102]"></a>rfalNfcaPollerTechnologyDetection</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaPollerTechnologyDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalNfcaPollerTechnologyDetection &rArr; rfalNfcaPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
</UL>

<P><STRONG><a name="[177]"></a>rfalNfcbPollerCheckPresence</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, rfal_nfcb.o(i.rfalNfcbPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
</UL>

<P><STRONG><a name="[108]"></a>rfalNfcbPollerCollisionResolution</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, rfal_nfcb.o(i.rfalNfcbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = rfalNfcbPollerCollisionResolution &rArr; rfalNfcbPollerCollisionResolutionSlotted &rArr; rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
</UL>

<P><STRONG><a name="[179]"></a>rfalNfcbPollerCollisionResolutionSlotted</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, rfal_nfcb.o(i.rfalNfcbPollerCollisionResolutionSlotted))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = rfalNfcbPollerCollisionResolutionSlotted &rArr; rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
</UL>

<P><STRONG><a name="[107]"></a>rfalNfcbPollerInitialize</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rfal_nfcb.o(i.rfalNfcbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
</UL>

<P><STRONG><a name="[17a]"></a>rfalNfcbPollerSleep</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, rfal_nfcb.o(i.rfalNfcbPollerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalNfcbPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
</UL>

<P><STRONG><a name="[17b]"></a>rfalNfcbPollerSlotMarker</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rfal_nfcb.o(i.rfalNfcbPollerSlotMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalNfcbPollerSlotMarker &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
</UL>

<P><STRONG><a name="[16b]"></a>rfalNfcbTR2ToFDT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbTR2ToFDT))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
</UL>

<P><STRONG><a name="[10b]"></a>rfalNfcfPollerCheckPresence</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rfal_nfcf.o(i.rfalNfcfPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = rfalNfcfPollerCheckPresence &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
</UL>

<P><STRONG><a name="[10c]"></a>rfalNfcfPollerCollisionResolution</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, rfal_nfcf.o(i.rfalNfcfPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = rfalNfcfPollerCollisionResolution &rArr; rfalNfcfPollerPoll &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
</UL>

<P><STRONG><a name="[10a]"></a>rfalNfcfPollerInitialize</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rfal_nfcf.o(i.rfalNfcfPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalNfcfPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
</UL>

<P><STRONG><a name="[17e]"></a>rfalNfcfPollerPoll</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, rfal_nfcf.o(i.rfalNfcfPollerPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = rfalNfcfPollerPoll &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
</UL>

<P><STRONG><a name="[10e]"></a>rfalNfcvPollerCollisionResolution</STRONG> (Thumb, 292 bytes, Stack size 192 bytes, rfal_nfcv.o(i.rfalNfcvPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = rfalNfcvPollerCollisionResolution &rArr; rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionEOF
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
</UL>

<P><STRONG><a name="[10d]"></a>rfalNfcvPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfal_nfcv.o(i.rfalNfcvPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalNfcvPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCV
</UL>

<P><STRONG><a name="[17f]"></a>rfalNfcvPollerInventory</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, rfal_nfcv.o(i.rfalNfcvPollerInventory))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[15c]"></a>rfalSetAnalogConfig</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, rfal_analogconfig.o(i.rfalSetAnalogConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[16a]"></a>rfalSetBitRate</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalSetBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693PhyConfigure
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[fc]"></a>rfalSetErrorHandling</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalSetErrorHandling))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
</UL>

<P><STRONG><a name="[fd]"></a>rfalSetFDTListen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalSetFDTListen))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
</UL>

<P><STRONG><a name="[fe]"></a>rfalSetFDTPoll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalSetFDTPoll))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
</UL>

<P><STRONG><a name="[ff]"></a>rfalSetGT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalSetGT))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
</UL>

<P><STRONG><a name="[fb]"></a>rfalSetMode</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, rfal_rfst25r3911.o(i.rfalSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
</UL>

<P><STRONG><a name="[ee]"></a>rfalSt25tbPollerCheckPresence</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rfal_st25tb.o(i.rfalSt25tbPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = rfalSt25tbPollerCheckPresence &rArr; rfalSt25tbPollerInitiate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[ef]"></a>rfalSt25tbPollerCollisionResolution</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = rfalSt25tbPollerCollisionResolution &rArr; rfalSt25tbPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSlotMarker
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerPcall
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[186]"></a>rfalSt25tbPollerGetUID</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerGetUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rfalSt25tbPollerGetUID &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[ec]"></a>rfalSt25tbPollerInitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalSt25tbPollerInitialize &rArr; rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[184]"></a>rfalSt25tbPollerInitiate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalSt25tbPollerInitiate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
</UL>

<P><STRONG><a name="[188]"></a>rfalSt25tbPollerPcall</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerPcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rfalSt25tbPollerPcall &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[185]"></a>rfalSt25tbPollerSelect</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalSt25tbPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[187]"></a>rfalSt25tbPollerSlotMarker</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerSlotMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rfalSt25tbPollerSlotMarker &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[149]"></a>rfalStartTransceive</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>

<P><STRONG><a name="[172]"></a>rfalT1TPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfal_t1t.o(i.rfalT1TPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalT1TPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[173]"></a>rfalT1TPollerRid</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, rfal_t1t.o(i.rfalT1TPollerRid))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = rfalT1TPollerRid &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[143]"></a>rfalTransceiveBlockingRx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalTransceiveBlockingRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>

<P><STRONG><a name="[11b]"></a>rfalTransceiveBlockingTx</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, rfal_rfst25r3911.o(i.rfalTransceiveBlockingTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>

<P><STRONG><a name="[15f]"></a>rfalTransceiveBlockingTxRx</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, rfal_rfst25r3911.o(i.rfalTransceiveBlockingTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepRATS
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPPS
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepATTRIB
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSlotMarker
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerPcall
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
</UL>

<P><STRONG><a name="[e4]"></a>rfalWakeUpModeHasWoke</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalWakeUpModeHasWoke))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[e8]"></a>rfalWakeUpModeStart</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, rfal_rfst25r3911.o(i.rfalWakeUpModeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rfalWakeUpModeStart &rArr; st25r3911MeasureRF &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureRF
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAntennaResonance
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[e5]"></a>rfalWakeUpModeStop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalWakeUpModeStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rfalWakeUpModeStop &rArr; st25r3911OscOn &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[f6]"></a>rfalWorker</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcDepBlockingTxRx
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
</UL>

<P><STRONG><a name="[130]"></a>st25r3911AdjustRegulators</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, st25r3911.o(i.st25r3911AdjustRegulators))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = st25r3911AdjustRegulators &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[131]"></a>st25r3911CalibrateAntenna</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st25r3911.o(i.st25r3911CalibrateAntenna))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911CalibrateAntenna &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[133]"></a>st25r3911ChangeRegisterBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st25r3911_com.o(i.st25r3911ChangeRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[135]"></a>st25r3911ChangeTestRegisterBits</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ChangeTestRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = st25r3911ChangeTestRegisterBits &rArr; st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadTestRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
</UL>

<P><STRONG><a name="[15b]"></a>st25r3911CheckChipID</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25r3911.o(i.st25r3911CheckChipID))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911CheckChipID &rArr; st25r3911ReadRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[194]"></a>st25r3911CheckForReceivedInterrupts</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, st25r3911_interrupt.o(i.st25r3911CheckForReceivedInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = st25r3911CheckForReceivedInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Isr
</UL>

<P><STRONG><a name="[12f]"></a>st25r3911CheckReg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, st25r3911.o(i.st25r3911CheckReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911CheckReg &rArr; st25r3911ReadRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsExtFieldOn
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[195]"></a>st25r3911ClearInterrupts</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, st25r3911_interrupt.o(i.st25r3911ClearInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = st25r3911ClearInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
</UL>

<P><STRONG><a name="[137]"></a>st25r3911ClrRegisterBits</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, st25r3911_com.o(i.st25r3911ClrRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911ClrRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOff
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[14e]"></a>st25r3911DisableInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st25r3911_interrupt.o(i.st25r3911DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911DisableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[14b]"></a>st25r3911EnableInterrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st25r3911_interrupt.o(i.st25r3911EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[144]"></a>st25r3911ExecuteCommand</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, st25r3911_com.o(i.st25r3911ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = st25r3911ExecuteCommand &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[13f]"></a>st25r3911ExecuteCommands</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, st25r3911_com.o(i.st25r3911ExecuteCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = st25r3911ExecuteCommands &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[14a]"></a>st25r3911GetInterrupt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, st25r3911_interrupt.o(i.st25r3911GetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st25r3911GetInterrupt &rArr; HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[159]"></a>st25r3911InitInterrupts</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, st25r3911_interrupt.o(i.st25r3911InitInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st25r3911InitInterrupts &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[15a]"></a>st25r3911Initialize</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = st25r3911Initialize &rArr; st25r3911MeasureVoltage &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOff
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[b6]"></a>st25r3911Isr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st25r3911_interrupt.o(i.st25r3911Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = st25r3911Isr &rArr; st25r3911CheckForReceivedInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[18e]"></a>st25r3911MeasureAntennaResonance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st25r3911.o(i.st25r3911MeasureAntennaResonance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911MeasureAntennaResonance &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[18d]"></a>st25r3911MeasureRF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, st25r3911.o(i.st25r3911MeasureRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911MeasureRF &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[197]"></a>st25r3911MeasureVoltage</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911MeasureVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = st25r3911MeasureVoltage &rArr; st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
</UL>

<P><STRONG><a name="[196]"></a>st25r3911ModifyInterrupts</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, st25r3911_interrupt.o(i.st25r3911ModifyInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
</UL>

<P><STRONG><a name="[191]"></a>st25r3911ModifyRegister</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ModifyRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureVoltage
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
</UL>

<P><STRONG><a name="[18f]"></a>st25r3911OscOn</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911OscOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = st25r3911OscOn &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
</UL>

<P><STRONG><a name="[146]"></a>st25r3911PerformCollisionAvoidance</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, st25r3911.o(i.st25r3911PerformCollisionAvoidance))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911PerformCollisionAvoidance &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[13c]"></a>st25r3911ReadFifo</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911ReadFifo &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[141]"></a>st25r3911ReadMultipleRegisters</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ReadMultipleRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>

<P><STRONG><a name="[14d]"></a>st25r3911ReadRegister</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911ReadRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckChipID
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[192]"></a>st25r3911ReadTestRegister</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911ReadTestRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911ReadTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
</UL>

<P><STRONG><a name="[181]"></a>st25r3911SetBitrate</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, st25r3911.o(i.st25r3911SetBitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911SetBitrate &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[198]"></a>st25r3911SetGPTime_8fcs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911SetGPTime_8fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = st25r3911SetGPTime_8fcs &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
</UL>

<P><STRONG><a name="[151]"></a>st25r3911SetNoResponseTime_64fcs</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, st25r3911.o(i.st25r3911SetNoResponseTime_64fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911SetNoResponseTime_64fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[18b]"></a>st25r3911SetNumTxBits</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911SetNumTxBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = st25r3911SetNumTxBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[138]"></a>st25r3911SetRegisterBits</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, st25r3911_com.o(i.st25r3911SetRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911SetRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOn
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[153]"></a>st25r3911StartGPTimer_8fcs</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911StartGPTimer_8fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetGPTime_8fcs
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>

<P><STRONG><a name="[183]"></a>st25r3911StreamConfigure</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, st25r3911.o(i.st25r3911StreamConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = st25r3911StreamConfigure &rArr; st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[145]"></a>st25r3911TxRxOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st25r3911.o(i.st25r3911TxRxOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911TxRxOff &rArr; st25r3911ClrRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
</UL>

<P><STRONG><a name="[147]"></a>st25r3911TxRxOn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st25r3911.o(i.st25r3911TxRxOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = st25r3911TxRxOn &rArr; st25r3911SetRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[156]"></a>st25r3911WaitForInterruptsTimed</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, st25r3911_interrupt.o(i.st25r3911WaitForInterruptsTimed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st25r3911WaitForInterruptsTimed &rArr; HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommandAndGetResult
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>

<P><STRONG><a name="[18c]"></a>st25r3911WriteFifo</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911WriteFifo &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[152]"></a>st25r3911WriteRegister</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckFieldSetLED
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyInterrupts
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNumTxBits
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetGPTime_8fcs
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[155]"></a>st25r3911WriteTestRegister</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, st25r3911_com.o(i.st25r3911WriteTestRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalRunListenModeWorker
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[11c]"></a>timerCalculateTimer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.timerCalculateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerCalculateTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
</UL>

<P><STRONG><a name="[114]"></a>timerIsExpired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(i.timerIsExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerIsExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
</UL>

<P><STRONG><a name="[7a]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[4a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1d3]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1d4]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[57]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[5b]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d8]"></a>MX_GPIO_Init</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>MX_SPI1_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>demoActivateP2P</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, demo.o(i.demoActivateP2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
</UL>

<P><STRONG><a name="[f3]"></a>demoIsoDepBlockingTxRx</STRONG> (Thumb, 198 bytes, Stack size 88 bytes, demo.o(i.demoIsoDepBlockingTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = demoIsoDepBlockingTxRx &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendAPDUs
</UL>

<P><STRONG><a name="[f8]"></a>demoNfcDepBlockingTxRx</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, demo.o(i.demoNfcDepBlockingTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = demoNfcDepBlockingTxRx &rArr; rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
</UL>

<P><STRONG><a name="[e9]"></a>demoPollAP2P</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, demo.o(i.demoPollAP2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = demoPollAP2P &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoActivateP2P
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[ea]"></a>demoPollNFCA</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, demo.o(i.demoPollNFCA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = demoPollNFCA &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendAPDUs
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoActivateP2P
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[eb]"></a>demoPollNFCB</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, demo.o(i.demoPollNFCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = demoPollNFCB &rArr; demoSendAPDUs &rArr; demoIsoDepBlockingTxRx &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendAPDUs
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[f1]"></a>demoPollNFCF</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, demo.o(i.demoPollNFCF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = demoPollNFCF &rArr; demoActivateP2P &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoActivateP2P
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[f2]"></a>demoPollNFCV</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, demo.o(i.demoPollNFCV))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = demoPollNFCV &rArr; rfalNfcvPollerCollisionResolution &rArr; rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[106]"></a>demoSendAPDUs</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, demo.o(i.demoSendAPDUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = demoSendAPDUs &rArr; demoIsoDepBlockingTxRx &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCB
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
</UL>

<P><STRONG><a name="[100]"></a>demoSendNdefUri</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, demo.o(i.demoSendNdefUri))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = demoSendNdefUri &rArr; demoNfcDepBlockingTxRx &rArr; rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcDepBlockingTxRx
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCF
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollNFCA
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoPollAP2P
</UL>

<P><STRONG><a name="[190]"></a>st25r3911ExecuteCommandAndGetResult</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, st25r3911.o(i.st25r3911ExecuteCommandAndGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = st25r3911ExecuteCommandAndGetResult &rArr; st25r3911EnableInterrupts &rArr; st25r3911ModifyInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureVoltage
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureRF
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAntennaResonance
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
</UL>

<P><STRONG><a name="[193]"></a>st25r3911CheckFieldSetLED</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, st25r3911_com.o(i.st25r3911CheckFieldSetLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st25r3911CheckFieldSetLED &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>

<P><STRONG><a name="[c7]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[d0]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[cf]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[d5]"></a>UART_SetConfig</STRONG> (Thumb, 762 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d7]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[4b]"></a>iso15693PhyVCDCode1Of256</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of256))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iso15693PhyVCDCode1Of256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(i.iso15693VCDCode)
</UL>
<P><STRONG><a name="[4c]"></a>iso15693PhyVCDCode1Of4</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, rfal_iso15693_2.o(i.iso15693PhyVCDCode1Of4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iso15693PhyVCDCode1Of4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(i.iso15693VCDCode)
</UL>
<P><STRONG><a name="[118]"></a>isoDepClearCounters</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepClearCounters))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
</UL>

<P><STRONG><a name="[113]"></a>isoDepDataExchangePCD</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, rfal_isodep.o(i.isoDepDataExchangePCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[119]"></a>isoDepDataExchangePICC</STRONG> (Thumb, 792 bytes, Stack size 48 bytes, rfal_isodep.o(i.isoDepDataExchangePICC))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = isoDepDataExchangePICC &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepReSendControlMsg
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[117]"></a>isoDepHandleControlMsg</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, rfal_isodep.o(i.isoDepHandleControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepReSendControlMsg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[11d]"></a>isoDepReSendControlMsg</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepReSendControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
</UL>

<P><STRONG><a name="[115]"></a>isoDepTx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, rfal_isodep.o(i.isoDepTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePICC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>

<P><STRONG><a name="[160]"></a>rfalIsoDepApdu2IBLockParam</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rfal_isodep.o(i.rfalIsoDepApdu2IBLockParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsoDepApdu2IBLockParam
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetMaxInfLen
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[167]"></a>rfalIsoDepCalcBitRate</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, rfal_isodep.o(i.rfalIsoDepCalcBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rfalIsoDepCalcBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[169]"></a>rfalIsoDepSFGI2SFGT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepSFGI2SFGT))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[176]"></a>rfalNfcaCalculateBcc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaCalculateBcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfalNfcaCalculateBcc
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
</UL>

<P><STRONG><a name="[178]"></a>rfalNfcbCheckSensbRes</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbCheckSensbRes))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>

<P><STRONG><a name="[129]"></a>nfcipClearCounters</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipClearCounters))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipSetDEPParams
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
</UL>

<P><STRONG><a name="[124]"></a>nfcipConfig</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rfal_nfcdep.o(i.nfcipConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nfcipConfig &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
</UL>

<P><STRONG><a name="[125]"></a>nfcipDEPControlMsg</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, rfal_nfcdep.o(i.nfcipDEPControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
</UL>

<P><STRONG><a name="[127]"></a>nfcipDataRx</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.nfcipDataRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nfcipDataRx
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[128]"></a>nfcipInitiatorHandleDEP</STRONG> (Thumb, 616 bytes, Stack size 56 bytes, rfal_nfcdep.o(i.nfcipInitiatorHandleDEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = nfcipInitiatorHandleDEP &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[12a]"></a>nfcipRun</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.nfcipRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[12c]"></a>nfcipSetDEPParams</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.nfcipSetDEPParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nfcipSetDEPParams
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
</UL>

<P><STRONG><a name="[12b]"></a>nfcipTargetHandleRX</STRONG> (Thumb, 820 bytes, Stack size 64 bytes, rfal_nfcdep.o(i.nfcipTargetHandleRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[126]"></a>nfcipTx</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, rfal_nfcdep.o(i.nfcipTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
</UL>

<P><STRONG><a name="[12d]"></a>nfcipTxRx</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, rfal_nfcdep.o(i.nfcipTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
</UL>

<P><STRONG><a name="[17c]"></a>rfalNfcfComputeValidSENF</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, rfal_nfcf.o(i.rfalNfcfComputeValidSENF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rfalNfcfComputeValidSENF &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
</UL>

<P><STRONG><a name="[136]"></a>rfalCleanupTransceive</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalCleanupTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = rfalCleanupTransceive &rArr; st25r3911SetRegisterBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[139]"></a>rfalErrorHandling</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalErrorHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = rfalErrorHandling &rArr; rfalFIFOStatusIsMissingPar &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsMissingPar
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[13d]"></a>rfalFIFOGetNumIncompleteBits</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalFIFOGetNumIncompleteBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = rfalFIFOGetNumIncompleteBits &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[13a]"></a>rfalFIFOStatusGetNumBytes</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalFIFOStatusGetNumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = rfalFIFOStatusGetNumBytes &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[13b]"></a>rfalFIFOStatusIsIncompleteByte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalFIFOStatusIsIncompleteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = rfalFIFOStatusIsIncompleteByte &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[13e]"></a>rfalFIFOStatusIsMissingPar</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalFIFOStatusIsMissingPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = rfalFIFOStatusIsMissingPar &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[140]"></a>rfalFIFOStatusUpdate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(i.rfalFIFOStatusUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsMissingPar
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
</UL>

<P><STRONG><a name="[154]"></a>rfalPrepareTransceive</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalPrepareTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[180]"></a>rfalRunListenModeWorker</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(i.rfalRunListenModeWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = rfalRunListenModeWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[14c]"></a>rfalTransceiveRunBlockingTx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(i.rfalTransceiveRunBlockingTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>

<P><STRONG><a name="[189]"></a>rfalTransceiveRx</STRONG> (Thumb, 936 bytes, Stack size 56 bytes, rfal_rfst25r3911.o(i.rfalTransceiveRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = rfalTransceiveRx &rArr; rfalErrorHandling &rArr; rfalFIFOStatusIsMissingPar &rArr; rfalFIFOStatusUpdate &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsMissingPar
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusGetNumBytes
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOGetNumIncompleteBits
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[18a]"></a>rfalTransceiveTx</STRONG> (Thumb, 678 bytes, Stack size 64 bytes, rfal_rfst25r3911.o(i.rfalTransceiveTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = rfalTransceiveTx &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNumTxBits
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCleanupTransceive
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[49]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
